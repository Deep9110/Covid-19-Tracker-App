{"version":3,"sources":["components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css","components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","images/image.png","App.js","index.js","App.module.css"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","console","log","className","styles","container","Grid","spacing","Justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterButtom","variant","start","end","value","duration","separator","Date","toDateString","url","fetchData","country","a","changeableUrl","axios","get","fetchDailyData","modifiedData","map","dailyData","total","date","reportDate","fetchcountries","countries","name","Chart","useState","setDailyData","useEffect","initialDailyData","fetchAPI","barChart","labels","datasets","label","backgroundColor","options","legend","display","title","text","lineChart","toLocaleDateString","borderColor","fill","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","App","state","fetchedData","setState","this","image","src","coronaImage","alt","React","Component","ReactDOM","render","document","getElementById"],"mappings":"iHACAA,EAAOC,QAAU,CAAC,UAAY,2B,oBCA9BD,EAAOC,QAAU,CAAC,YAAc,qC,mBCAhCD,EAAOC,QAAU,CAAC,UAAY,yBAAyB,KAAO,oBAAoB,SAAW,wBAAwB,UAAY,yBAAyB,OAAS,wB,gOCgEpJC,EA1DD,SAAC,GAAsD,IAAD,IAApDC,KAAMC,EAA8C,EAA9CA,UAAWC,EAAmC,EAAnCA,UAAWC,EAAwB,EAAxBA,OAAQC,EAAgB,EAAhBA,WAEhD,OADAC,QAAQC,IAAIL,GACRA,EAIA,qBAAKM,UAAWC,IAAOC,UAAvB,SACI,eAACC,EAAA,EAAD,CAAMD,WAAS,EAACE,QAAW,EAAGC,QAAQ,SAAtC,UACI,cAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,UAAaC,IAAMC,GAAI,GAAIC,GAAI,EAAGV,UAAWW,IAAGV,IAAOW,KAAMX,IAAOY,UAA/E,SACI,eAACC,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAYC,MAAM,gBAAgBC,cAAY,EAA9C,sBACA,cAACF,EAAA,EAAD,CAAYG,QAAQ,KAApB,SACI,cAAC,IAAD,CACIC,MAAQ,EACRC,IAAK1B,EAAU2B,MACfC,SAAU,IACVC,UAAU,QAGlB,cAACR,EAAA,EAAD,CAAYC,MAAM,gBAAlB,SAAmC,IAAIQ,KAAK3B,GAAY4B,iBACxD,cAACV,EAAA,EAAD,CAAYG,QAAS,SAArB,qDAGR,cAACf,EAAA,EAAD,CAAMG,MAAI,EAACC,UAAaC,IAAMC,GAAI,GAAIC,GAAI,EAAIV,UAAWW,IAAGV,IAAOW,KAAMX,IAAON,WAAhF,SACI,eAACmB,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAYC,MAAM,gBAAgBC,cAAY,EAA9C,uBACA,cAACF,EAAA,EAAD,CAAYG,QAAQ,KAApB,SACI,cAAC,IAAD,CACIC,MAAQ,EACRC,IAAKzB,EAAU0B,MACfC,SAAU,IACVC,UAAU,QAGlB,cAACR,EAAA,EAAD,CAAYC,MAAM,gBAAlB,SAAmC,IAAIQ,KAAK3B,GAAY4B,iBACxD,cAACV,EAAA,EAAD,CAAYG,QAAS,SAArB,2DAGR,cAACf,EAAA,EAAD,CAAMG,MAAI,EAACC,UAAaC,IAAMC,GAAI,GAAIC,GAAI,EAAIV,UAAWW,IAAGV,IAAOW,KAAMX,IAAOL,QAAhF,SACI,eAACkB,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAYC,MAAM,gBAAgBC,cAAY,EAA9C,oBACA,cAACF,EAAA,EAAD,CAAYG,QAAQ,KAApB,SACI,cAAC,IAAD,CACIC,MAAQ,EACRC,IAAKxB,EAAOyB,MACZC,SAAU,IACVC,UAAU,QAGlB,cAACR,EAAA,EAAD,CAAYC,MAAM,gBAAlB,SAAmC,IAAIQ,KAAK3B,GAAY4B,iBACxD,cAACV,EAAA,EAAD,CAAYG,QAAS,SAArB,2DA/CT,c,yBCRTQ,EAAM,iCAECC,EAAS,uCAAG,WAAMC,GAAN,2BAAAC,EAAA,6DACjBC,EAAgBJ,EAEjBE,IACCE,EAAa,UAAMJ,EAAN,sBAAuBE,IAJnB,kBAO+CG,IAAMC,IAAIF,GAPzD,2BAOXrC,KAAOC,EAPI,EAOJA,UAAWC,EAPP,EAOOA,UAAWC,EAPlB,EAOkBA,OAAQC,EAP1B,EAO0BA,WAP1B,kBASX,CAACH,YAAWC,YAAWC,SAAQC,eATpB,kCAWjBC,QAAQC,IAAR,MAXiB,0DAAH,sDAcTkC,EAAc,uCAAG,gCAAAJ,EAAA,+EAEDE,IAAMC,IAAN,UAAaN,EAAb,WAFC,uBAEfjC,EAFe,EAEfA,KAEDyC,EAAezC,EAAK0C,KAAI,SAACC,GAAD,MAAc,CACzC1C,UAAW0C,EAAU1C,UAAU2C,MAC/BzC,OAAQwC,EAAUxC,OAAOyC,MACzBC,KAAMF,EAAUG,eAPG,kBAUfL,GAVe,gCAYtBpC,QAAQC,IAAR,MAZsB,yDAAH,qDAgBdyC,EAAc,uCAAG,8BAAAX,EAAA,+EAEYE,IAAMC,IAAN,UAAcN,EAAd,eAFZ,uBAERe,EAFQ,EAEfhD,KAAOgD,UAFQ,kBAIfA,EAAUN,KAAI,SAACP,GAAD,OAAaA,EAAQc,SAJpB,gCAOtB5C,QAAQC,IAAR,MAPsB,yDAAH,qD,0BCuFZ4C,EAnHD,SAAC,GAAoD,IAAD,IAAlDlD,KAAOC,EAA2C,EAA3CA,UAAWE,EAAgC,EAAhCA,OAAQD,EAAwB,EAAxBA,UAAYiC,EAAY,EAAZA,QAClD,EAAkCgB,mBAAS,IAA3C,mBAAOR,EAAP,KAAkBS,EAAlB,KAEFC,qBAAU,YAIM,uCAAG,4BAAAjB,EAAA,sEACkBI,IADlB,OACPc,EADO,OAGbF,EAAaE,GAHA,2CAAH,qDAMdC,KACC,IA8CL,IAAMC,EACFvD,EACE,cAAC,IAAD,CACED,KAAM,CACJyD,OAAQ,CAAC,WAAY,YAAa,UAClCC,SAAU,CACR,CACEC,MAAO,SACPC,gBAAiB,CAAC,uBAAwB,uBAAwB,wBAClE5D,KAAM,CAACC,EAAU2B,MAAO1B,EAAU0B,MAAOzB,EAAOyB,UAItDiC,QAAS,CACPC,OAAQ,CAAEC,SAAS,GACnBC,MAAO,CAAED,SAAS,EAAME,KAAK,oBAAD,OAAsB9B,OAGpD,KAGA+B,EACJvB,EAAU,GACR,cAAC,IAAD,CACE3C,KAAM,CACJyD,OAAQd,EAAUD,KAAI,gBAAGG,EAAH,EAAGA,KAAH,OAAc,IAAId,KAAKc,GAAMsB,wBACnDT,SAAU,CAAC,CACT1D,KAAM2C,EAAUD,KAAI,SAAC1C,GAAD,OAAUA,EAAKC,aACnC0D,MAAO,WACPS,YAAa,UACbC,MAAM,GACL,CACDrE,KAAM2C,EAAUD,KAAI,SAAC1C,GAAD,OAAUA,EAAKG,UACnCwD,MAAO,SACPS,YAAa,MACbR,gBAAiB,uBACjBS,MAAM,GACL,CACDrE,KAAM2C,EAAUD,KAAI,SAAC1C,GAAD,OAAUA,EAAKE,aACnCyD,MAAO,YACPS,YAAa,QACbR,gBAAiB,uBACjBS,MAAM,OAKV,KAEJ,OACI,qBAAK9D,UAAWC,IAAOC,UAAvB,SACK0B,EAAUqB,EAAWU,K,oCCzFnBI,EArBO,SAAC,GAA0B,IAAzBC,EAAwB,EAAxBA,oBACpB,EAAgDpB,mBAAS,IAAzD,mBAAOqB,EAAP,KAAyBC,EAAzB,KAWA,OATApB,qBAAU,YACQ,uCAAG,sBAAAjB,EAAA,kEACbqC,EADa,SACa1B,IADb,6EAAH,qDAGdQ,KACF,CAACkB,IAKC,cAACC,EAAA,EAAD,CAAanE,UAAWC,IAAOmE,YAA/B,SACI,eAACC,EAAA,EAAD,CAAcC,aAAa,GAAGC,SAAU,SAACC,GAAD,OAAMR,EAAoBQ,EAAEC,OAAOpD,QAA3E,UACI,wBAAQA,MAAM,GAAd,oBACC4C,EAAiB9B,KAAI,SAACP,EAAS8C,GAAV,OAAe,wBAAgBrD,MAAOO,EAAvB,SAAiCA,GAApB8C,Y,iBCvBnD,MAA0B,kCC2E1BC,E,4MAxDXC,MAAO,CACHnF,KAAM,GACNmC,QAAS,I,EAWboC,oB,uCAAsB,WAAMpC,GAAN,eAAAC,EAAA,sEACQF,EAAUC,GADlB,OACZiD,EADY,OAGlB,EAAKC,SAAS,CAACrF,KAAKoF,EAAajD,QAAQA,IAHvB,2C,oJANtB,4BAAAC,EAAA,sEAC8BF,IAD9B,OACUkD,EADV,OAGIE,KAAKD,SAAS,CAACrF,KAAKoF,IAHxB,gD,0EAeA,WACI,MAAuBE,KAAKH,MAAtBnF,EAAN,EAAMA,KAAMmC,EAAZ,EAAYA,QAEZ,OACI,sBAAK5B,UAAWC,IAAOC,UAAvB,UAEI,qBAAKF,UAAWC,IAAO+E,MAAOC,IAAKC,EAAaC,IAAI,aACxD,cAAC,EAAD,CAAO1F,KAAMA,IACb,cAAC,EAAD,CAAeuE,oBAAqBe,KAAKf,sBACzC,cAAC,EAAD,CAAOvE,KAAMA,EAAMmC,QAASA,W,GAlCtBwD,IAAMC,WCXxBC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,U,mBCJjDnG,EAAOC,QAAU,CAAC,UAAY,uBAAuB,MAAQ,sB","file":"static/js/main.71850012.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__2uR2S\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__31R3W\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__2gCIs\",\"card\":\"Cards_card__2020z\",\"infected\":\"Cards_infected__3jFPk\",\"recovered\":\"Cards_recovered__2fnOA\",\"deaths\":\"Cards_deaths___Ukw_\"};","import React from 'react';\r\nimport { Card, CardContent, Typography, Grid } from '@material-ui/core';\r\nimport CountUp from 'react-countup';\r\nimport cx from 'classnames';\r\n\r\nimport styles from './Cards.module.css';\r\n\r\nconst Cards = ({data:{confirmed, recovered, deaths, lastUpdate}}) =>{\r\n    console.log(confirmed);\r\n    if(!confirmed) {\r\n        return 'Loading...';\r\n    }\r\n    return (\r\n        <div className={styles.container}>\r\n            <Grid container spacing = {3} Justify=\"center\">\r\n                <Grid item component = {Card} xs={12} md={3} className={cx(styles.card, styles.infected)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterButtom>Infected</Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp \r\n                                start= {0}\r\n                                end={confirmed.value}\r\n                                duration={2.5}\r\n                                separator=\",\"\r\n                            />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant =\" body2\">Number of active cases of COVID-19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item component = {Card} xs={12} md={3}  className={cx(styles.card, styles.recovered)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterButtom>Recovered</Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp \r\n                                start= {0}\r\n                                end={recovered.value}\r\n                                duration={2.5}\r\n                                separator=\",\"\r\n                            />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant =\" body2\">Number of recoveries cases from COVID-19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item component = {Card} xs={12} md={3}  className={cx(styles.card, styles.deaths)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterButtom>Deaths</Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp \r\n                                start= {0}\r\n                                end={deaths.value}\r\n                                duration={2.5}\r\n                                separator=\",\"\r\n                            />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant =\" body2\">Number of deaths caused by COVID-19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n            </Grid>\r\n\r\n        </div>\r\n    );\r\n}\r\nexport default Cards;","import axios from 'axios';\r\n\r\nconst url = \"https://covid19.mathdro.id/api\";\r\n\r\nexport const fetchData = async(country) => {\r\n    let changeableUrl = url;\r\n    \r\n    if(country){\r\n        changeableUrl = `${url}/countries/${country}`;\r\n    }\r\n    try{\r\n       const {data: {confirmed, recovered, deaths, lastUpdate}} = await axios.get(changeableUrl);\r\n\r\n       return {confirmed, recovered, deaths, lastUpdate};\r\n    } catch (error){\r\n        console.log(error);\r\n    }\r\n}\r\nexport const fetchDailyData = async ()=>{\r\n    try {\r\n        const {data} = await axios.get(`${url}/daily`);\r\n\r\n        const modifiedData = data.map((dailyData)=>({\r\n           confirmed: dailyData.confirmed.total,\r\n           deaths: dailyData.deaths.total,\r\n           date: dailyData.reportDate,\r\n        }));\r\n\r\n        return modifiedData;\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport const fetchcountries = async() =>{\r\n    try {\r\n        const {data: {countries}} = await axios.get (`${url}/countries`);\r\n\r\n        return countries.map((country) => country.name);\r\n        \r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}","import React, {useState, useEffect} from 'react';\r\nimport { fetchDailyData } from '../../api';\r\nimport {Line, Bar} from 'react-chartjs-2';\r\n\r\nimport styles from './Chart.module.css';\r\n\r\nconst Chart = ({data: {confirmed, deaths, recovered}, country}) =>{\r\n    const [dailyData, setDailyData] = useState([]);\r\n    \r\n  useEffect(() =>{\r\n    // const fetchAPI = async () => {\r\n    //     setDailyData(await fetchDailyData());\r\n    // }\r\n    const fetchAPI = async () => {\r\n        const initialDailyData = await fetchDailyData();\r\n  \r\n        setDailyData(initialDailyData);\r\n      };\r\n\r\n    fetchAPI();\r\n  }, []);\r\n\r\n//     const lineChart =(\r\n//         dailyData.length \r\n//         ? (\r\n//             <Line \r\n//             data={{\r\n//                 lebels: dailyData.map(({date}) => date),\r\n//                 datasets: [{\r\n//                     data: dailyData.map(({confirmed}) => confirmed),\r\n//                     lebel: 'Infected',\r\n//                     borderColor: '#3333ff',\r\n//                     fill: true,\r\n//                 }, {\r\n//                     data: dailyData.map(({deaths}) => deaths),\r\n//                     lebel: 'Deaths',\r\n//                     borderColor: 'red',\r\n//                     backgroundColor: 'rgba(255, 0, 0, 0.5)',\r\n//                     fill: true,\r\n//                 }],  \r\n//             }}\r\n//         />) : null\r\n         \r\n//     );\r\n\r\n//    // console.log(confirmed, recovered, deaths);\r\n\r\n//     const barChart = (\r\n//         confirmed\r\n//         ? (\r\n//             <Bar \r\n//                 data={{\r\n//                     lebels: ['Infected', 'Recovered', 'Deaths'],\r\n//                     datasets: [{\r\n//                         lebel: 'People',\r\n//                         backgroundColor:['rgba(0, 0, 255, 0.5)', 'rgba(0, 255, 0, 0.5)', 'rgba(255, 0, 0, 0.5)'],\r\n//                         data:[confirmed.value, recovered.value, deaths.value],\r\n//                     }]\r\n//                 }}\r\n//                 options={{\r\n//                    legend: { display: false},\r\n//                    title: { display: true, text: `Current State in ${country}`}\r\n//                 }}\r\n//             />\r\n//         ): null\r\n//     );\r\nconst barChart = (\r\n    confirmed ? (\r\n      <Bar\r\n        data={{\r\n          labels: ['Infected', 'Recovered', 'Deaths'],\r\n          datasets: [\r\n            {\r\n              label: 'People',\r\n              backgroundColor: ['rgba(0, 0, 255, 0.5)', 'rgba(0, 255, 0, 0.5)', 'rgba(255, 0, 0, 0.5)'],\r\n              data: [confirmed.value, recovered.value, deaths.value],\r\n            },\r\n          ],\r\n        }}\r\n        options={{\r\n          legend: { display: false },\r\n          title: { display: true, text: `Current state in ${country}` },\r\n        }}\r\n      />\r\n    ) : null\r\n  );\r\n\r\n  const lineChart = (\r\n    dailyData[0] ? (\r\n      <Line\r\n        data={{\r\n          labels: dailyData.map(({ date }) => new Date(date).toLocaleDateString()),\r\n          datasets: [{\r\n            data: dailyData.map((data) => data.confirmed),\r\n            label: 'Infected',\r\n            borderColor: '#3333ff',\r\n            fill: true,\r\n          }, {\r\n            data: dailyData.map((data) => data.deaths),\r\n            label: 'Deaths',\r\n            borderColor: 'red',\r\n            backgroundColor: 'rgba(255, 0, 0, 0.5)',\r\n            fill: true,\r\n           },{\r\n            data: dailyData.map((data) => data.recovered),\r\n            label: 'Recovered',\r\n            borderColor: 'green',\r\n            backgroundColor: 'rgba(0, 255, 0, 0.5)',\r\n            fill: true,\r\n          },\r\n          ],\r\n        }}\r\n      />\r\n    ) : null\r\n  );\r\n    return (\r\n        <div className={styles.container}>\r\n            {country ? barChart : lineChart}\r\n        </div>\r\n    )\r\n}\r\nexport default Chart;","import React, { useState, useEffect} from 'react';\r\nimport { NativeSelect, FormControl } from '@material-ui/core';\r\n\r\nimport styles from './CountryPicker.module.css';\r\n\r\nimport { fetchcountries } from '../../api';\r\n\r\nconst CountryPicker = ({handleCountryChange}) =>{\r\n    const [fetchedCountries, setFetchedCountries] = useState([]);\r\n\r\n    useEffect(() =>{\r\n        const fetchAPI = async () =>{\r\n            setFetchedCountries(await fetchcountries());\r\n        }\r\n        fetchAPI();\r\n    },[setFetchedCountries]);\r\n\r\n    //console.log(fetchedCountries);\r\n\r\n    return (\r\n        <FormControl className={styles.formControl}>\r\n            <NativeSelect defaultValue=\"\" onChange={(e)=> handleCountryChange(e.target.value)}>\r\n                <option value=\"\">Global</option>\r\n                {fetchedCountries.map((country, i) =><option key={i} value={country}>{country}</option>)}\r\n            </NativeSelect>\r\n        </FormControl>\r\n    )\r\n}\r\nexport default CountryPicker;","export default __webpack_public_path__ + \"static/media/image.9e5d4fc7.png\";","import React from 'react';\r\n\r\n// import Cards from './components/Cards/Cards';\r\n// import Chart from './components/Chart/Chart';\r\n// import CountryPicker from './components/CountryPicker/CountryPicker';\r\n\r\nimport { Cards, Chart, CountryPicker,} from './components';\r\nimport styles from './App.module.css';\r\n\r\n//import { ThemeProvider, cssBaseLine, Switch } from '@material-ui/core';\r\nimport { fetchData} from './api';\r\n\r\nimport coronaImage from './images/image.png';\r\n\r\n\r\n            \r\nclass App extends React.Component{\r\n\r\n    \r\n    state ={\r\n        data: {},\r\n        country: '',\r\n        \r\n\r\n    }\r\n\r\n    async componentDidMount(){\r\n        const fetchedData = await fetchData();\r\n\r\n        this.setState({data:fetchedData})\r\n    }\r\n\r\n    handleCountryChange = async(country) =>{\r\n        const fetchedData = await fetchData(country);\r\n\r\n        this.setState({data:fetchedData, country:country});\r\n        \r\n        //fetch the data\r\n        //set the state\r\n    }\r\n\r\n    render(){\r\n        const{data, country} = this.state;\r\n        \r\n        return(\r\n            <div className={styles.container}>\r\n            \r\n                <img className={styles.image} src={coronaImage} alt=\"COVID-19\"/> \r\n            <Cards data={data} />\r\n            <CountryPicker handleCountryChange={this.handleCountryChange} />\r\n            <Chart data={data} country={country}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n// export default function App() {\r\n//     const [darkMode, setDarkMode] = useState(false);\r\n//     return (\r\n//       <div className={darkMode ? \"dark-mode\" : \"light-mode\"}>\r\n//         <div className=\"container\">\r\n//           <span style={{ color: darkMode ? \"grey\" : \"yellow\" }}>☀︎</span>\r\n//           <div className=\"switch-checkbox\">\r\n//             <label className=\"switch\">\r\n//               <input type=\"checkbox\" onChange={() => setDarkMode(!darkMode)} />\r\n//               <span className=\"slider round\"> </span>\r\n//             </label>\r\n//           </div>\r\n//           <span style={{ color: darkMode ? \"#c96dfd\" : \"grey\" }}>☽</span>\r\n//         </div>\r\n//       </div>\r\n//     );\r\n//   }\r\n    \r\n                \r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__22yXd\",\"image\":\"App_image__2E8zR\"};"],"sourceRoot":""}